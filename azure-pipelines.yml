
#trigger:
#- main

pool: AzureAgentPool

stages:
- stage: 'Build'
  displayName: 'Build'
  jobs:
     - job: 
       steps:
       
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            replaceExistingArchive: true
          displayName: "ZIPing source files"

        - task: CmdLine@2
          inputs:
            script: |
              echo Write your commands here
              rmdir /s /Q $(Pipeline.Workspace)\drop-Artifacts
              echo Hello world
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop-Artifacts'
            publishLocation: 'Container'
          displayName: "Publish-Build-Artifacts"
          

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      name: AzureAgentPool
    environment: class16July2024
    strategy:
      runOnce: 
        deploy:
          steps:
          
          - task: CmdLine@2
            inputs:
              script: |
                echo Write your commands here
                rmdir /s /Q 'c:\TestFlaskDeployment\'
                echo Hello world
          

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Pipeline.Workspace)\drop-Artifacts'
              Contents: '**'
              TargetFolder: 'c:\TestFlaskDeployment\'
              CleanTargetFolder: true
              OverWrite: true
              flattenFolders: true
              preserveTimestamp: true
              ignoreMakeDirErrors: true
  
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $zipFolder = "C:\TestFlaskDeployment\"  # Folder where the zip file is located
                $zipFile = Get-ChildItem -Path $zipFolder -Filter "*.zip" -File | Select-Object -First 1  # Find the first zip file

                if ($zipFile) {
                    $destination = $zipFolder  # Unzipping in the same folder
                    Write-Host "Found zip file: $($zipFile.FullName)"
                    
                    # Unzip the file into the same folder
                    Expand-Archive -Path $zipFile.FullName -DestinationPath $destination -Force
                    Write-Host "Unzipped $($zipFile.FullName) to $destination"
                } else {
                    Write-Host "No zip file found in $zipFolder"
                }

          - task: CmdLine@2
            inputs:
              script: |
                echo Write your commands here
                
                  cd "C:\TestFlaskDeployment\"

                   # Use shell syntax for string concatenation
                   set envvar=env-$(Build.BuildId)
      
                    # Create virtual environment
                    Python -m venv %envvar%

                    # pip install wfastcgi
                    pip install wfastcgi

                    # Activate the virtual environment
                    call %envvar%\Scripts\activate.bat

                    wfastcgi-enable
                echo Hello world
               
          - task: IISWebAppManagementOnMachineGroup@0
            inputs:
              IISDeploymentType: 'IISWebsite'
              ActionIISWebsite: 'CreateOrUpdateWebsite'
              WebsiteName: 'TestFlaskDeployment'
              WebsitePhysicalPath: 'C:\TestFlaskDeployment'
              WebsitePhysicalPathAuth: 'WebsiteUserPassThrough'
              AddBinding: true
              Bindings: |
                {
                   "bindings":[{
                                  "protocol":"http",
                                  "ipAddress":"*",
                                  "port":"15",
                                  "sslThumbprint":"",
                                  "sniFlag":false 
                              }]
                }                                     
              CreateOrUpdateAppPoolForWebsite: true
              AppPoolNameForWebsite: 'TestFlaskDeployment-app-pool'
              DotNetVersionForWebsite: 'No Managed Code'
              PipeLineModeForWebsite: 'Integrated'
              AppPoolIdentityForWebsite: 'ApplicationPoolIdentity'
              


          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # Write your PowerShell commands here.
                # Define paths and environment variables
                  $pythonPath = "C:\Python312\python.exe"
                  $wfastcgiScript = "C:\Python312\Lib\site-packages\wfastcgi.py"
                  $physicalPath = "C:\TestFlaskDeployment"  # Update this to your actual application path

                  # Register the FastCGI application globally
                  $fastCgiAppPath = "MACHINE/WEBROOT/APPHOST"


                  # Update WSGI Handler
                  Set-WebConfigurationProperty -pspath "$fastCgiAppPath/$siteName/" -filter "system.webServer/handlers" -name "." -value @{
                      name = 'Python FastCGI'
                      path = "*"
                      verb = "*"
                      modules = "FastCgiModule"
                      scriptProcessor = "$pythonPath|$wfastcgiScript"
                      resourceType = "Either"
                      requireAccess = "Script"
                  }

                 

                Write-Host "Hello World"